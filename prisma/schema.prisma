// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  user_id         Int            @id @default(autoincrement())
  email           String         @unique
  name            String         @db.VarChar(255)
  image           String         @db.VarChar(255)
  password        String         @db.VarChar(100)
  library_card_no String         @db.VarChar(10)
  profile_status  String?        @db.VarChar(10)
  role            String         @db.VarChar(10)
  is_active       Boolean        @default(true)
  created_at      DateTime       @default(now())
  updated_at      DateTime       @default(now())
  last_login_at   DateTime?
  borrowings      Borrowings[]
  ratings         Ratings[]
  reservations    Reservations[]
  staffPicks      StaffPicks[]
  fines           Fines[]
}

model Books {
  book_id           Int                 @id @default(autoincrement())
  isbn              String              @db.VarChar(13)
  name              String              @db.VarChar(255)
  author            String              @db.VarChar(255)
  no_of_copies      Int
  is_active         Boolean             @default(true)
  publish_year      Int
  created_at        DateTime            @default(now())
  updated_at        DateTime            @default(now())
  bookCategoryLinks BookCategoryLinks[]
  bookPhotos        BookPhotos[]
  borrowings        Borrowings[]
  ratings           Ratings[]
  reservations      Reservations[]
  staffPicks        StaffPicks[]
}

model BookCategories {
  category_id         Int                 @id @default(autoincrement())
  category_name       String
  book_category_links BookCategoryLinks[]
}

model BookCategoryLinks {
  book_id         Int
  category_id     Int
  books           Books          @relation(fields: [book_id], references: [book_id], onDelete: Cascade)
  book_categories BookCategories @relation(fields: [category_id], references: [category_id], onDelete: Cascade)

  @@id([book_id, category_id])
  @@index([category_id])
}

model BookPhotos {
  photo_id   Int       @id @default(autoincrement())
  book_id    Int
  url        String    @db.VarChar(1024)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  books      Books     @relation(fields: [book_id], references: [book_id], onDelete: Cascade)

  @@index([book_id])
}

model Activities {
  activity_id    Int              @id @default(autoincrement())
  title          String           @db.VarChar(255)
  description    String?          @db.Text
  activity_date  DateTime
  start_time     String           @db.VarChar(10)
  end_time       String           @db.VarChar(10)
  age_group      String?          @db.VarChar(20)
  capacity       Int?
  photo_url      String?          @db.VarChar(1024)
  created_at     DateTime         @default(now())
  updated_at     DateTime         @default(now())
  activityPhotos ActivityPhotos[]
}

model ActivityPhotos {
  photo_id    Int        @id @default(autoincrement())
  activity_id Int
  url         String     @db.VarChar(1024)
  created_at  DateTime?  @default(now())
  updated_at  DateTime?  @default(now())
  activities  Activities @relation(fields: [activity_id], references: [activity_id], onDelete: Cascade)

  @@index([activity_id])
}

model Borrowings {
  borrowing_id Int       @id @default(autoincrement())
  book_id      Int
  user_id      Int
  borrow_date  DateTime
  due_date     DateTime
  return_date  DateTime?
  books        Books     @relation(fields: [book_id], references: [book_id])
  users        Users     @relation(fields: [user_id], references: [user_id])
  fines        Fines[]

  @@index([book_id])
  @@index([user_id])
}

model Ratings {
  rating_id  Int      @id @default(autoincrement())
  book_id    Int
  user_id    Int
  rating     Int
  review     String?  @db.Text
  created_at DateTime @default(now())
  books      Books    @relation(fields: [book_id], references: [book_id])
  users      Users    @relation(fields: [user_id], references: [user_id])

  @@index([book_id])
  @@index([user_id])
}

model Reservations {
  reservation_id   Int      @id @default(autoincrement())
  user_id          Int
  book_id          Int
  reservation_date DateTime
  expiration_date  DateTime
  books            Books    @relation(fields: [book_id], references: [book_id])
  users            Users    @relation(fields: [user_id], references: [user_id])

  @@index([book_id])
  @@index([user_id])
}

model StaffPicks {
  pick_id   Int      @id @default(autoincrement())
  book_id   Int
  user_id   Int
  pick_date DateTime
  books     Books    @relation(fields: [book_id], references: [book_id])
  users     Users    @relation(fields: [user_id], references: [user_id])

  @@index([book_id])
  @@index([user_id])
}

model Fines {
  fine_id      Int        @id @default(autoincrement())
  borrowing_id Int
  user_id      Int
  fine_amount  Decimal
  fine_date    DateTime
  paid_date    DateTime?
  borrowings   Borrowings @relation(fields: [borrowing_id], references: [borrowing_id])
  users        Users      @relation(fields: [user_id], references: [user_id])

  @@index([borrowing_id])
  @@index([user_id])
}
