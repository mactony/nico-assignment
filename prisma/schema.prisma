generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  role          UserRole  @default(USER)
  bio           String?   @db.Text
  expertise     String[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  orders        Order[]
  posts         Post[]
  services      Service[]

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  scope             String?
  id_token          String?  @db.Text
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token") @db.Text
  accessToken  String?  @map("access_token") @db.Text
  expires      DateTime
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Service {
  id          String          @id @default(cuid())
  title       String
  description String          @db.Text
  price       Float
  category    ServiceCategory
  subCategory String?
  duration    Int? // Duration in minutes
  level       AcademicLevel?
  userId      String // Service provider
  user        User            @relation(fields: [userId], references: [id])
  orders      Order[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
}

model Order {
  id              String      @id @default(cuid())
  userId          String
  serviceId       String
  status          OrderStatus
  deadlineDate    DateTime
  totalPrice      Float
  additionalNotes String?     @db.Text
  user            User        @relation(fields: [userId], references: [id])
  service         Service     @relation(fields: [serviceId], references: [id])
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model Post {
  id        String       @id @default(cuid())
  title     String
  content   String       @db.Text
  slug      String       @unique
  published Boolean      @default(false)
  userId    String
  user      User         @relation(fields: [userId], references: [id])
  category  PostCategory
  tags      String[]
  views     Int          @default(0)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

enum UserRole {
  ADMIN
  TUTOR
  WRITER
  EDITOR
  CLIENT
  USER
}

enum ServiceCategory {
  TUTORING
  WRITING
  EDITING
  PROOFREADING
  RESEARCH
  CONSULTATION
}

enum AcademicLevel {
  HIGH_SCHOOL
  UNDERGRADUATE
  MASTERS
  DOCTORAL
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
  UNDER_REVIEW
}

enum PostCategory {
  ACADEMIC_TIPS
  WRITING_GUIDES
  RESEARCH_METHODS
  STUDY_SKILLS
  CAREER_ADVICE
  EDUCATION_NEWS
}
